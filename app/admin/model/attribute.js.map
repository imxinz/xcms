{
    "version": 3,
    "sources": [
        "../../../src/admin/model/attribute.js"
    ],
    "names": [
        "upattr",
        "data",
        "create",
        "think",
        "isEmpty",
        "id",
        "create_time",
        "Date",
        "valueOf",
        "status",
        "add",
        "addField",
        "res",
        "console",
        "log",
        "delete",
        "updateField",
        "update_time",
        "update",
        "checkTableExist",
        "model_id",
        "table_name",
        "extend_model",
        "Model",
        "model",
        "where",
        "field",
        "find",
        "extend",
        "parseConfig",
        "config",
        "prefix",
        "name",
        "toLowerCase",
        "query",
        "length",
        "_filed",
        "table_exist",
        "value",
        "def",
        "isNumberString",
        "isString",
        "fie",
        "sql",
        "title",
        "parseSql",
        "model_info",
        "need_pk",
        "engine_type",
        "execute",
        "_field",
        "getField",
        "last_field",
        "deleteField",
        "checkName",
        "map",
        "get_model_attribute",
        "group",
        "fields",
        "select",
        "info",
        "attr",
        "val",
        "attribute",
        "attribute_list",
        "split",
        "field_sort",
        "obj_values",
        "JSON",
        "parse",
        "keys",
        "_group",
        "k",
        "__group",
        "push",
        "narr",
        "in_array",
        "concat",
        "attribute_alias",
        "alias",
        "forEach",
        "v",
        "base"
    ],
    "mappings": "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",
    "file": "../../../src/admin/model/attribute.js",
    "sourcesContent": [
        "'use strict';\n/**\n * model\n */\nexport default class extends think.model.base {\n\n    /**\n     * 新增或更新一个属性\n     * @return Boolean  fasle 失败 ， int  成功 返回完整的数据\n     * @author\n     */\n    async upattr(data, create) {\n        //获取数据对象\n        if (think.isEmpty(data)) {\n            return false;\n        }\n\n        if (think.isEmpty(data.id)) {//新增字段\n            data.create_time = new Date().valueOf();\n            data.status = 1;\n            let id = await this.add(data);\n            if (!id) {\n                return false;\n            }\n            if (create) {\n                //新增表字段\n                let res = await this.addField(data);\n                console.log(res);\n                //return false;\n                if (!res) {\n                    this.delete(id)\n                    return false;\n                }\n            }\n\n        } else {//更新数据\n            if (create) {\n                //更新表字段\n                let res = await this.updateField(data);\n                if (!res) {\n                    return false;\n                }\n            }\n            data.update_time = new Date().valueOf();\n            let status = await this.update(data);\n            if (!status) {\n                return false;\n            }\n        }\n        return data;\n    }\n\n    /**\n     * 检查当前表是否存在\n     * @param Number model_id 模型id\n     * @return Number 是否存在\n     * @author\n     */\n    async checkTableExist(model_id) {\n        let table_name;\n        let extend_model;\n        let Model = this.model(\"model\");\n        let model = await Model.where({id: model_id}).field(\"name,extend\").find();\n        if (model.extend == 0) {//独立模型表名\n            table_name = this.table_name = think.parseConfig(true, think.config(\"db\")).prefix + model.name.toLowerCase();\n        } else {\n            extend_model = await Model.where({id: model.extend}).field(\"name,extend\").find();\n            table_name = this.table_name = think.parseConfig(true, think.config(\"db\")).prefix + extend_model.name.toLowerCase() + '_' + model.name.toLowerCase();\n        }\n        let res = await think.model('mysql', think.config(\"db\")).query(`SHOW TABLES LIKE '${table_name}'`)\n        return res.length;\n    }\n\n    /**\n     * 新建表字段\n     * @param Array field 需要新建的字段属性\n     * @return Boolean  true 成功 ， false 失败\n     * @author\n     */\n    async addField(_filed) {\n        //检查表是否存在\n        let table_exist = await this.checkTableExist(_filed.model_id);\n        var def;\n        var sql;\n        //获取默认值\n        var value = _filed.value;\n        if (value === '') {\n            def = '';\n        } else if (think.isNumberString(value)) {\n            def = ' DEFAULT ' + value;\n        } else if (think.isString(value)) {\n            def = ' DEFAULT \\'' + value + '\\'';\n        } else {\n            def = '';\n        }\n\n        if (table_exist) {\n            let fie = _filed;\n            sql = `ALTER TABLE \\`${this.table_name}\\` ADD COLUMN \\`${fie.name}\\`  ${fie.field}  ${def} COMMENT \\'${fie.title}\\';`\n            sql = this.parseSql(sql);\n        } else {//新建表时是否默认新增‘id主键’字段\n\n            let model_info = await this.model('model').where({id: _filed.model_id}).field('engine_type,need_pk').find();\n            if (model_info.need_pk) {\n                let fie = _filed;\n                sql = ` CREATE TABLE IF NOT EXISTS \\`${this.table_name}\\` (\n                \\`id\\`  int(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT \\'主键\\' ,\n                \\`${fie.name}\\`  ${fie.field} ${def} COMMENT \\'${fie.title}\\' ,\n                PRIMARY KEY (\\`id\\`)\n                )\n                ENGINE=${model_info.engine_type}\n                DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci\n                CHECKSUM=0\n                ROW_FORMAT=DYNAMIC\n                DELAY_KEY_WRITE=0\n                ;`\n                sql = this.parseSql(sql);\n            } else {\n                let fie = _filed;\n                sql = `  CREATE TABLE IF NOT EXISTS \\`${this.table_name}\\` (\n                \\`${fie.name}\\`  ${fie.field} ${def} COMMENT \\'${fie.title}\\'\n                )\n                ENGINE=${model_info.engine_type}\n                DEFAULT CHARACTER SET=utf8 COLLATE=utf8_general_ci\n                CHECKSUM=0\n                ROW_FORMAT=DYNAMIC\n                DELAY_KEY_WRITE=0\n                ;`\n                sql = this.parseSql(sql);\n            }\n        }\n        let res = await think.model('mysql', think.config(\"db\")).execute(sql);\n\n        return res >= 0;\n\n    }\n\n    /**\n     * 更新表字段\n     * @param array _field 需要更新的字段属性\n     * @return boolean true 成功 ， false 失败\n     * @author\n     */\n    async updateField(_field) {\n        //检查表是否存在\n         await this.checkTableExist(_field.model_id);\n\n        //获取原字段名\n        let last_field = await this.where({id: _field.id}).getField('name');\n\n        //获取默认值\n        let def = _field.value != '' ? ' DEFAULT ' + _field.value : '';\n\n        let sql = `ALTER TABLE \\`${this.table_name}\\` CHANGE COLUMN \\`${last_field}\\` \\`${_field.name}\\`  ${_field.field} ${def} COMMENT \\'${_field.title}\\' ;`\n        sql = this.parseSql(sql);\n        console.log(sql);\n        let res = await think.model('mysql', think.config(\"db\")).execute(sql);\n        console.log(res);\n        return res == 0;\n    }\n\n    /**\n     * 删除一个字段\n     * @param array field 需要删除的字段属性\n     * @return boolean true 成功 ， false 失败\n     * @author\n     */\n    async  deleteField(_field) {\n        //检查表是否存在\n         await this.checkTableExist(_field.model_id);\n\n        let sql = `ALTER TABLE \\`${this.table_name}\\` DROP COLUMN \\`${_field.name}\\`;`\n\n        sql = this.parseSql(sql);\n       // console.log(sql);\n        let res = await think.model('mysql', think.config(\"db\")).execute(sql);\n        return res == 0;\n    }\n\n\n    /**\n     * 检查同一张表是否有相同的字段\n     * @param name 要验证的字段名称\n     * @param model_id 要验证的字段的模型id\n     * @author\n     */\n    async checkName(name, model_id, id) {\n        let map = {'name': name, 'model_id': model_id};\n        if (!think.isEmpty(id)) {\n            map.id = [\"!=\", id];\n        }\n        let res = await this.where(map).find();\n        return think.isEmpty(res);\n    }\n\n    /**\n     * 获取属性信息并缓存\n     * @param int id 属性id\n     * @param string field 要获取的字段名\n     * @return string  属性信息\n     */\n    async get_model_attribute(model_id, group, fields) {\n        //group=group?true:false;\n        //fields=fields?true:false;\n        let map;\n        //验证ID\n        if (think.isEmpty(model_id) || !think.isNumberString(model_id)) {\n            return '';\n        }\n        //获取属性\n        map = {model_id: model_id};\n        let extend = await this.model('model').where({id: model_id}).getField('extend', true);\n        //console.log(extend);\n        if (extend) {\n            map = {model_id: ['IN', [model_id, extend]]}\n        }\n        let info = await this.where(map).field(fields).select();\n        let attr = {};\n        if (group) {\n            for (let val of info) {\n                attr[val.id] = val;\n            }\n            let model = await this.model('model').field(\"field_sort,attribute_list,attribute_alias\").find(model_id);\n            let attribute;\n            if (model.attribute_list) {\n                attribute = model.attribute_list.split(\",\")\n            } else {\n                attribute = [];\n            }\n            let group;\n            if (think.isEmpty(model.field_sort)) {\n                group = {1: obj_values(attr)}\n            } else {\n                group = JSON.parse(model.field_sort);\n                let keys = Object.keys(group);\n                //console.log(group);\n                let _group = {};\n                for (var k in group) {\n                    let __group = []\n                    for (let val of group[k]) {\n                        __group.push(attr[val]);\n                        delete attr[val];\n                    }\n                    _group[k] = __group;\n                }\n                group = _group;\n\n                if (!think.isEmpty(attr)) {\n                    let narr = []\n                    for (let k in attr) {\n                        if (!in_array(attr[k].id, attribute)) {\n                            delete attr[k];\n                        } else {\n                            narr.push(attr[k]);\n                        }\n                    }\n                    group[keys[0]] = group[keys[0]].concat(narr)\n\n                }\n                if (!think.isEmpty(model.attribute_alias)) {\n                    //let alias  = preg_split('/[;\\r\\n]+/s', model.attribute_alias);\n                    let alias = model.attribute_alias.split('\\r\\n');\n                    //think.log(alias);\n                    let fields = {};\n                    for (let value of alias) {\n                        let val = value.split(':');\n                        //think.log(val);\n                        fields[val[0]] = val[1];\n                    }\n                    //think.log(fields);\n                    for (let value in group) {\n                        group[value].forEach((v, k)=> {\n                            if (!think.isEmpty(fields[v.name])) {\n                                //think.log(group[value][k]);\n                                group[value][k]['title'] = fields[v.name];\n                               \n                            }\n                        })\n                         //think.log(group[value]['title']);\n                    }\n                    \n                }\n                attr = group;\n                //think.log(attr);\n            }\n        } else {\n            for (let v of info) {\n                attr[v.name] = v;\n            }\n        }\n        return attr;\n    }\n}"
    ]
}