{
    "version": 3,
    "sources": [
        "../../../src/admin/controller/auth.js"
    ],
    "names": [
        "init",
        "http",
        "tactive",
        "updaterules",
        "returnnodes",
        "nodes",
        "AuthRule",
        "model",
        "map",
        "where",
        "order",
        "select",
        "rules",
        "data",
        "forEach",
        "temp",
        "name",
        "value",
        "url",
        "desc",
        "title",
        "module",
        "pid",
        "type",
        "status",
        "toLocaleLowerCase",
        "update",
        "ids",
        "diff",
        "rule",
        "i",
        "key",
        "think",
        "isEmpty",
        "id",
        "push",
        "condition",
        "isObjectValueEqual",
        "row",
        "addMany",
        "obj_values",
        "indexAction",
        "list",
        "v",
        "groupid",
        "count",
        "assign",
        "meta_title",
        "display",
        "adduserAction",
        "isPost",
        "post",
        "console",
        "log",
        "add",
        "success",
        "fail",
        "active",
        "edituserAction",
        "allowpost",
        "allowpostverify",
        "allowupgrade",
        "allowsendmessage",
        "allowattachment",
        "allowsearch",
        "get",
        "find",
        "info",
        "deluserAction",
        "delete",
        "dels",
        "getField",
        "issystem",
        "del",
        "sortAction",
        "param",
        "adminAction",
        "roleAction",
        "gets",
        "draw",
        "field",
        "res",
        "json",
        "roleeditAction",
        "isAjax",
        "description",
        "roleaddAction",
        "roledelAction",
        "accessAction",
        "auth_role",
        "this_role",
        "role",
        "accessdataAction",
        "node_list",
        "main_rules",
        "m_rules",
        "obj",
        "testAction",
        "ss",
        "end",
        "writeroleAction",
        "rule_ids",
        "isArray",
        "sort",
        "a",
        "b",
        "join",
        "chstaAction"
    ],
    "mappings": "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",
    "file": "../../../src/admin/controller/auth.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | CmsWing [ 网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2015 http://www.cmswing.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: arterli <arterli@qq.com>\n// +----------------------------------------------------------------------\n'use strict';\n\nimport Base from './base.js';\nexport default class extends Base {\n    init(http) {\n        super.init(http);\n        this.tactive = \"user\";\n    }\n    /**\n     * 后台节点配置的url作为规则存入auth_rule\n     * 执行新节点的插入,已有节点的更新,无效规则的删除三项任务\n     * @author\n     */\n    async updaterules() {\n        //需要新增的节点必然位于$nodes\n        let nodes = await this.returnnodes(false);\n        //think.log(nodes);\n        let AuthRule = this.model('auth_rule');\n        let map = {'module': 'admin', 'type': ['in', [1, 2]]};//status全部取出,以进行更新\n        //需要更新和删除的节点必然位于$rules\n        let rules = await AuthRule.where(map).order('name').select();\n        //构建insert数据\n        let data = {};//保存需要插入和更新的新节点\n\n        nodes.forEach(value=> {\n            let temp = {};\n            temp.name = value.url;\n            temp.desc = value.title;\n            temp.module = 'admin';\n            if (value.pid > 0) {\n                temp.type = 1;\n            } else {\n                temp.type = 2;\n            }\n            temp.status = 1;\n            //$data[strtolower($temp['name'].$temp['module'].$temp['type'])] = $temp;//去除重复项\n            let url = temp.name + temp.module + temp.type;\n            url = url.toLocaleLowerCase();\n            data[url] = temp;\n\n        })\n        //console.log(rules);\n        let update = [];//保存需要更新的节点\n        let ids = [];//保存需要删除的节点的id\n        let diff = {};\n        rules.forEach((rule, i) => {\n            let key = rule.name + rule.module + rule.type;\n            key = key.toLocaleLowerCase();\n            if (!think.isEmpty(data[key])) {//如果数据库中的规则与配置的节点匹配,说明是需要更新的节点\n                data[key].id = rule.id;//为需要更新的节点补充id值\n                update.push(data[key]);\n                delete data[key];\n                // console.log(i);\n                // rules.splice(i,1);\n                delete rule.condition;\n                delete rule.pid;\n                //console.log(rule);\n                diff[rule.id] = rule;\n            } else {\n                if (rule.status == 1) {\n                    ids.push(rule.id);\n                }\n            }\n        });\n\n        // console.log(update);\n        //console.log(rules);\n        // console.log(diff);\n        //console.log(data);\n        if (!think.isEmpty(update)) {\n            update.forEach(row=> {\n                //console.log(isObjectValueEqual(row, diff[row.id]))\n               // console.log(row)\n                //console.log(diff[row.id])\n                if (!isObjectValueEqual(row, diff[row.id])) {\n\n                    AuthRule.where({id: row.id}).update(row);\n                    //console.log(row);\n                }\n            })\n        }\n        //console.log(ids);\n        if (!think.isEmpty(ids)) {\n            AuthRule.where({id: ['IN', ids]}).update({'status': -1});\n            //删除规则是否需要从每个用户组的访问授权表中移除该规则?\n        }\n        // console.log(data);\n        if (!think.isEmpty(data)) {\n            AuthRule.addMany(obj_values(data));\n        }\n        //if ( $AuthRule->getDbError() ) {\n        //    trace('['.__METHOD__.']:'.$AuthRule->getDbError());\n        //    return false;\n        //}else{\n        //    return true;\n        //}\n        return true;\n    }\n\n\n    /**\n     * 用户分组管理首页\n     * @returns {*}\n     */\n   async indexAction() {\n        let list = await this.model(\"users_group\").order(\"sort ASC\").select();\n        for(let v of list){\n            v.count=await this.model('users').where({groupid:v.groupid,status:1}).count('id');\n        }\n        this.assign(\"list\",list);\n        this.meta_title = \"会员组管理\";\n        return this.display();\n    }\n\n    /**\n     * 添加会员组\n     */\n    async adduserAction(){\n        if(this.isPost()){\n            let data = this.post();\n            console.log(data);\n            let add = await this.model(\"users_group\").add(data);\n\n                if (add) {\n                    return this.success({ name: \"添加成功！\",url:\"/admin/auth/index\"});\n                } else {\n                    return this.fail(\"添加失败！\");\n                }\n\n        }else {\n            this.meta_title=\"添加会员组\";\n            this.active=\"admin/auth/index\";\n            return this.display();\n        }\n\n    }\n    /**\n     * 编辑会员组\n     */\n    async edituserAction(){\n        if(this.isPost()){\n            let data = this.post();\n            data.allowpost= data.allowpost||0;\n            data.allowpostverify= data.allowpostverify||0;\n            data.allowupgrade= data.allowupgrade||0;\n            data.allowsendmessage= data.allowsendmessage||0;\n            data.allowattachment= data.allowattachment||0;\n            data.allowsearch= data.allowsearch||0;\n            console.log(data);\n            let update = await this.model(\"users_group\").where({groupid:data.groupid}).update(data);\n\n            if (update) {\n                return this.success({ name: \"编辑成功！\",url:\"/admin/auth/index\"});\n            } else {\n                return this.fail(\"编辑失败！\");\n            }\n\n        }else {\n            let info = await this.model(\"users_group\").where({groupid:this.get(\"id\")}).find();\n            this.assign(\"info\",info);\n            this.meta_title=\"编辑会员组\";\n            this.active=\"admin/auth/index\";\n            return this.display();\n        }\n\n    }\n    /**\n     * 删除会员组\n     */\n    async deluserAction(){\n        if(this.isPost()){\n            let ids = this.post(\"ids\");\n            let dels = await this.model('users_group').where({groupid:['IN',ids]}).delete();\n            if(dels){\n                return this.success({ name: \"删除成功！\"});\n            }else {\n                return this.fail(\"删除失败！\");\n            }\n        }else {\n            let id = this.get(\"id\");\n            let issystem = await this.model('users_group').where({groupid:id}).getField(\"issystem\",true);\n            if(issystem>0){\n                return this.fail(\"系统组，不能删除！\")\n            }\n            let del = await this.model('users_group').where({groupid:id}).delete();\n            if(del){\n                return this.success({ name: \"删除成功！\"});\n            }else {\n                return this.fail(\"删除失败！\");\n            }\n        }\n\n    }\n    /**\n     * 排序\n     */\n    async sortAction() {\n     if(this.param('type')==1){\n         await super.sortAction(this,'users_group','groupid');\n     }\n\n    }\n    /**\n     * 管理角色管理首页\n     * @returns {*}\n     */\n    adminAction() {\n        this.assign({\n            \"datatables\": true,\n            \"tactive\": \"/admin/user\",\n            \"selfjs\": \"auth\"\n        })\n        this.active = \"admin/auth/index\";\n        this.meta_title = \"权限管理\";\n        return this.display();\n    }\n    /**\n     * role\n     * 权限管理首页ajax角色列表\n     * @returns {Promise|*}\n     */\n    async roleAction() {\n        let gets = this.get();\n        let draw = gets.draw;\n        let res = await this.model('auth_role').field(\"id,desc,status,description\").order(\"id ASC\").select();\n        let data = {\n            \"draw\": draw,\n            \"data\": res\n        }\n        //console.log(data);\n        return this.json(data);\n    }\n\n    async roleeditAction() {\n        if (this.isAjax(\"post\")) {\n            let id = this.post(\"id\");\n            let desc = this.post(\"desc\");\n            let description = this.post(\"description\");\n            let data = await this.model('auth_role').where({id: id}).update({desc: desc, description: description});\n            return this.json(data);\n        } else {\n            let id = this.get(\"id\");\n            let res = await this.model('auth_role').where({id: id}).find();\n            this.assign({\n                data: res\n            })\n            return this.display();\n        }\n    }\n\n    async roleaddAction() {\n        let data = this.post();\n        //console.log(1111111111111111)\n        let res = await this.model('auth_role').add(data);\n\n        if (res) {\n            return this.json(1);\n        } else {\n            return this.json(0)\n        }\n    }\n\n    /**\n     * roldel\n     * 角色删除\n     * @returns {Promise|*}\n     */\n    async roledelAction() {\n        let id = this.post(\"id\");\n        //console.log(id);\n        let res = await this.model('auth_role').where({id: id}).delete();\n        return this.json(res);\n    }\n\n    /**\n     * 权限列表\n     * @returns {*}\n     */\n    async accessAction() {\n        await this.updaterules();//更新权限节点\n        let auth_role = await this.model('auth_role').where({status:[\"!=\",0],module :\"admin\",'type':1}).field('id,desc,rule_ids').select();\n        //let node_list = await this.returnnodes();\n        //let map       = {module:\"admin\",type:2,status:1};\n        //let main_rules= await this.model('auth_rule').where(map).field(\"name,id\").select();\n        //let nap       = {module:\"admin\",type:1,status:1};\n        //let child_rules = await this.model('auth_rule').where(nap).field('name,id').select();\n        let this_role = {};\n            auth_role.forEach(role=>{\n                if(role.id==this.get(\"id\")){\n                    this_role = role;\n                }\n            })\n        //console.log(node_list);\n        this.active=\"admin/auth/index\";\n        this.meta_title=\"权限管理\"\n        this.assign({\n            \"tactive\": \"/admin/user\",\n            \"selfjs\": \"auth\",\n            \"thisid\":this.get(\"id\"),\n            \"auth_role\":auth_role,\n            \"this_role\":this_role\n        })\n        return this.display();\n    }\n    async accessdataAction() {\n        await this.updaterules();//更新权限节点\n        let auth_role = await this.model('auth_role').where({status:[\"!=\",0],module :\"admin\",'type':1}).field('id,desc,rule_ids').select();\n        let node_list = await this.returnnodes();\n        let map       = {module:\"admin\",type:['IN',[1,2]],status:1};\n        let main_rules=await this.model('auth_rule').where(map).field(\"name,id\").select();\n        //let nap       = {module:\"admin\",type:1,status:1};\n        //let child_rules =await this.model('auth_rule').where(nap).field('name,id').select();\n        let this_role = {};\n        auth_role.forEach(role=>{\n            if(role.id==this.post(\"id\")){\n                this_role = role;\n            }\n        })\n        let m_rules = {}\n        main_rules.forEach(v=>{\n            let obj = {}\n             obj[v.name]=v.id;\n            Object.assign(m_rules,obj)\n        })\n        let data = {\n            \"main_rules\":m_rules,\n            \"node_list\":node_list,\n            \"this_role\":this_role\n        }\n        return this.json(data);\n    }\n    async testAction() {\n\n        let ss = await this.updaterules();\n        //console.log(ss);\n        this.end();\n    }\n\n    /**\n     * 管理员用户组数据写入/更新\n     *\n     */\n    async writeroleAction(){\n        let map={};\n        map.rule_ids = this.post(\"rules\");\n        if(think.isArray(map.rule_ids)){\n        map.rule_ids = map.rule_ids.sort(function(a,b){return a-b}).join(\",\");\n        }\n        map.module = \"admin\";\n        map.type = 1;\n        let id = this.post(\"id\");\n        let role = this.model(\"auth_role\");\n            await role.where({id:id}).update(map);\n            return this.success({name:\"更新成功\"});\n\n    }\n\n    /**\n     * 改变角色状态\n     * @returns {Promise|*}\n     */\n    async chstaAction(){\n        let role = this.model(\"auth_role\");\n        let res = await role.update(this.get());\n        if(res){\n            return this.json(res);\n        }\n    }\n}"
    ]
}