{
    "version": 3,
    "sources": [
        "../../../../src/common/adapter/auth/rbac.js"
    ],
    "names": [
        "init",
        "userId",
        "config",
        "http",
        "think",
        "isObject",
        "id",
        "extend",
        "type",
        "user",
        "role",
        "rule",
        "user_role",
        "userInfo",
        "check",
        "name",
        "and",
        "isString",
        "split",
        "getAuthList",
        "authList",
        "length",
        "indexOf",
        "logic",
        "item",
        "_getAuthList",
        "data",
        "flushAuthList",
        "key",
        "session",
        "get",
        "isEmpty",
        "set",
        "all",
        "getUserInfo",
        "result",
        "forEach",
        "condition",
        "push",
        "replace",
        "a",
        "fn",
        "Function",
        "flag",
        "getRuleIds",
        "ids",
        "model",
        "field",
        "where",
        "status",
        "select",
        "find",
        "getRoles",
        "ruleIds",
        "rule_ids",
        "concat",
        "alias",
        "join",
        "table",
        "as",
        "on",
        "adapter",
        "base"
    ],
    "mappings": "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",
    "file": "../../../../src/common/adapter/auth/rbac.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\n// | CmsWing [ 网站内容管理框架 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2015 http://www.cmswing.com All rights reserved.\n// +----------------------------------------------------------------------\n// | Author: arterli <arterli@qq.com>\n// +----------------------------------------------------------------------\n'use strict';\n/**\n * Role-Based Access Control\n\n DROP TABLE IF EXISTS `think_auth_role`;\n CREATE TABLE `think_auth_role` (\n `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n `desc` varchar(255) NOT NULL DEFAULT '',\n `status` tinyint(11) NOT NULL DEFAULT '1',\n `rule_ids` varchar(255) DEFAULT '' COMMENT '',\n PRIMARY KEY (`id`)\n ) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n\n DROP TABLE IF EXISTS `think_auth_rule`;\n CREATE TABLE `think_auth_rule` (\n `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n `name` varchar(255) NOT NULL DEFAULT '' COMMENT '',\n `desc` varchar(255) NOT NULL DEFAULT '' COMMENT '',\n `pid` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '',\n `status` tinyint(11) NOT NULL DEFAULT '1',\n `condition` varchar(255) DEFAULT '' COMMENT '',\n PRIMARY KEY (`id`),\n UNIQUE KEY `name` (`name`),\n KEY `status` (`status`)\n ) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n\n DROP TABLE IF EXISTS `think_auth_user_role`;\n CREATE TABLE `think_auth_user_role` (\n `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n `user_id` int(11) NOT NULL,\n `role_id` int(11) NOT NULL,\n PRIMARY KEY (`id`),\n UNIQUE KEY `user_role` (`user_id`,`role_id`)\n ) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n\n * @type {Class}\n */\nexport default class extends think.adapter.base {\n  /**\n   * init\n   * @param  {Number} userId []\n   * @param  {Object} config []\n   * @param  {Object} http   []\n   * @return {}        []\n   */\n  init(userId, config, http){\n    super.init(http);\n    if (think.isObject(userId)) {\n      config = userId;\n      userId = config.id;\n    }\n    this.userId = userId;\n    this.config = think.extend({\n      type: 1, //auth type, 2 is session auth\n      user: 'users', //user info table\n      role: 'auth_role', //role table\n      rule: 'auth_rule', //rule table\n      user_role: 'auth_user_role', //user - role relation table\n      userInfo: null\n    }, config);\n\n  }\n  /**\n   * check auth\n   * @param  {String} name [auth type]\n   * @param  {Boolean} and  [condition]\n   * @return {Promise}      []\n   */\n  async check(name, and){\n\n    if (think.isString(name)) {\n      name = name.split(',');\n    }\n    let authList =await this.getAuthList();\n\n    if (name.length === 1) {\n      return authList.indexOf(name[0]) > -1;\n    }\n\n    let logic = and ? 'every' : 'some';\n\n    return name[logic](item => {\n      return authList.indexOf(item) > -1;\n    });\n  }\n  async _getAuthList(){\n    let data;\n    if (this.config.type === 1) {\n      data = await this.flushAuthList();\n    }else{\n      let http = this.http;\n      let key = this.config('auth_key');\n      think.session(this.http);\n      let data = await http.session.get(key);\n      if(think.isEmpty(data)){\n        data = await this.flushAuthList();\n        await http.session.set(key, data);\n      }\n    }\n    return data;\n  }\n  /**\n   * get auth list\n   * @return {Promise} []\n   */\n  async getAuthList(){\n    let data = await Promise.all([this._getAuthList(), this.getUserInfo()]);\n\n    let authList = data[0];\n    let userInfo = data[1];\n    let result = [];\n\n    authList.forEach(item => {\n      if (!item.condition) {\n        result.push(item.name);\n      }else{\n        let condition = item.condition.replace(/\\w+/, a => `userInfo.${a}`);\n        /*jslint evil: true */\n        let fn = new Function('userInfo', `return ${condition}`);\n        let flag = fn(userInfo);\n        if (flag) {\n          result.push(item.name);\n        }\n      }\n    });\n    return result;\n  }\n  /**\n   * flush auth list\n   * @return {Promise} []\n   */\n  async flushAuthList(){\n    let ids = await this.getRuleIds();\n    let model = think.model(this.config.rule,think.config('db'));\n    return model.field('name,condition').where({id: ['IN', ids], status: 1}).select();\n  }\n  /**\n   * get user info\n   * @return {Promise} []\n   */\n  async getUserInfo(){\n    if (!think.isEmpty(this.config.userInfo)) {\n      return this.config.userInfo;\n    }\n    let data = await think.model(this.config.user,think.config('db')).where({id: this.userId}).find();\n    this.config.userInfo = data;\n    return data;\n  }\n  /**\n   * get rule ids\n   * @return {Promise} []\n   */\n  async getRuleIds(){\n    let data = await this.getRoles();\n\n    let ids = [];\n    data.forEach(item => {\n      let ruleIds = (item.rule_ids || '').split(',');\n      ids = ids.concat(ruleIds);\n    });\n    return ids;\n  }\n  /**\n   * get roles\n   * @return {Promise} []\n   */\n  getRoles(){\n    return think.model(this.config.user_role,think.config('db')).alias('a').join({\n      table: this.config.role,\n      as: 'b',\n      on: ['role_id', 'id']\n    }).where({\n      'a.user_id': this.userId,\n      'b.status': 1\n    }).select();\n  }\n}"
    ]
}